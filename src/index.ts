import { app, ipcMain, net, BrowserWindow } from 'electron';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Create the main window
let mainWindow: BrowserWindow;
let childWindow: BrowserWindow;

const createWindow = (): void => {
  mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: false, // TODO: make it so this isn't necessary
    },
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY); // Assuming your React app is served at this URL

  // Handle window configuration changes
  ipcMain.on('window-config', (event, config) => {
    mainWindow.setSize(config.width, config.height);
    // Object.assign(mainWindow, config);
  });

  // Handle window change requests
  ipcMain.on('change-window', (event, whindow) => {
    mainWindow.webContents.send('change-window', whindow);
  });

  ipcMain.on('open-child-window', (event, pageUrl) => {
    createChildWindow(mainWindow, pageUrl);
  });

  ipcMain.on('api-request', async (event, url, requestData) => {
    try {
      const response = await net.fetch(url, requestData);

      if (!response.ok) {
        // TODO: better error reporting
        event.sender.send('api-error', response.statusText);
      }
      const { status, headers } = response;
      const json = await response.json();
      event.sender.send('api-response', { json, status, headers: Object.fromEntries(headers.entries()) });
    } catch (error) {
      event.sender.send('api-error', error);
    }
  });
}

function createChildWindow(mainWindow: BrowserWindow, pageUrl: string) {
  childWindow = new BrowserWindow({
    width: 400,
    height: 300,
    parent: mainWindow, // Set parent window
    modal: true, // Make child window modal (blocks interaction with parent)
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  ipcMain.on('close-child-window', (event, pageUrl) => {
    childWindow.hide(); // TODO: figure out how to do this correctly and/or eliminate bell sound
  });

  const fullPageUrl = `${MAIN_WINDOW_WEBPACK_ENTRY}${pageUrl}`
  childWindow.loadURL(fullPageUrl);
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
